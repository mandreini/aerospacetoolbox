{"name":"Aerospace Toolbox","tagline":"A collection of functions for Python 2.7","body":"The Aerospace Toolbox for Python contains a collection of functions intended for aerospace engineering applications. The toolbox is developed (and currently tested only) in a Python 2.7 environment and requires a recent version of NumPy and SciPy. The toolbox is designed to allow quick and robust evaluation of different functions and to properly accept and handle array-like data structures.\r\n\r\n### Features\r\n\r\n* Functions for evaluation of the standard atmosphere and custom defined atmospheres. Isentropic relations, normal shock wave relations and Prandtl-Meyer expansion waves. And more!\r\n* The theoretical formulas are evaluated by either direct substition or iteration with the Newton-Raphson method if the former is not possible.\r\n* Each function has a full docstring explaining it's syntax and usage. Docstrings follow the NumPy docstring standard.\r\n* All functions accept input data in any form that can be converted to an array. This includes scalars, lists, tuples, matrices and ndarrays. Each functions returns it's results in original form.\r\n* Includes a module which wraps most of the functions in [MATLAB Aerospace Toolbox](http://www.mathworks.nl/help/aerotbx/index.html) syntax.\r\n\r\n### Installation\r\n\r\nThe easiest way to obtain the most recent version of the Aerospace Toolbox is by downloading the source as a [ZIP-file](https://github.com/wilcoschoneveld/aerospacetoolbox/zipball/master). Extract the contents to a folder and install the package by running the following command:\r\n\r\n````\r\npython setup.py install\r\n````\r\n\r\nA Python 2.7 distribution with [NumPy](http://www.numpy.org/) and [SciPy](http://www.scipy.org/) is needed in order to make proper use of the Aerospace Toolbox. A recent version of [matplotlib](http://matplotlib.org/) is required to run the example scripts.\r\n\r\n### Usage\r\n\r\nIf you want to use the Aerospace Toolbox in your scripts, you can write the following command to import all the functions:\r\n\r\n````python\r\nfrom aerotbx import *\r\n````\r\n\r\nThis will import the main functions and modules into your namespace. From here you can start using the functions provided by the toolbox. In the case you come from MATLAB and are used to the syntax from it's aerospace toolbox, you can use the matlab module that comes with this package. You can import all the MATLAB-style functions with the following:\r\n\r\n````python\r\nfrom aerotbx.matlab import *\r\n````\r\n\r\n### Examples\r\n\r\nYou can easily convert values from one unit to another by using the *convert* function. The function accepts an array_like data structure as input, followed by two strings representing the input unit and target unit.\r\n\r\n````python\r\n>>> convert(30, 'cm', 'ft') #30 centimeters to feet\r\n0.98425196850393692\r\n>>> convert([0, 15, 30], 'C', 'K') #degrees celcius to kelvin\r\n[273.15, 288.15, 303.15]\r\n````\r\n\r\nThe function *flownormalshock* returns a tuple of flow values from normal shockwave theory. You can input one of the flow values as array_like data and the function will calculate the rest:\r\n\r\n````python\r\n>>> flowvalues = flownormalshock(M=3) #upstream Mach number = 3\r\n>>> flowvalues[1] #downstream Mach number\r\n0.47519096331149141\r\n>>> flowvalues = flownormalshock(Pitot=3) #Rayleight-Pitot\r\n>>> flowvalues[0] #upstream Mach number\r\n1.3858511209068562\r\n````\r\n\r\nThe International Standard Atmosphere (ISA) can be evaluated with the *stdatmos* function. The following example uses [matplotlib](http://matplotlib.org/) to plot the temperature gradient from 0 to 80 kilometers geometrical altitude.\r\n\r\n````python\r\n>>> from pylab import *\r\n>>> h_array = linspace(0, 80000)\r\n>>> h, T, P, rho, a = stdatmos(h=h_array)\r\n>>> plot(T, h)\r\n>>> xlabel(\"Temperature [K]\")\r\n>>> ylabel(\"Height [M]\")\r\n>>> show()\r\n````\r\n\r\nAnother way of using the *stdatmos* function is to find the altitude at which a certain temperature, pressure or density occurs. The pressure altitude of 26 kPa can be found as follows:\r\n\r\n````python\r\n>>> stdatmos(P=26000)[0] #should be about 10km\r\n10124.61855654098\r\n````\r\n\r\nFor more information on all available functions and usages, refer to the source code on github. You can also use the python *help* function to display the docstring provided with each function:\r\n\r\n````python\r\n>>> help(geoidheight)\r\n````","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}